behavior vaultConfig(formId, isInit)
  on keydown[keyCode == 13] from <input/> in me
    halt the event
    trigger click on <a/> in me
  end

  on click from #{'vault-apply-' + formId} in me
    if not isInit
      halt the event
      remove @aria-invalid from <[aria-invalid]/> in me
      if not value of #{'vault-password-' + formId}
        add [@aria-invalid=true] to #{'vault-password-' + formId} throw '{{ L["Password missing"] }}'
      end
      if value of #{'vault-password-' + formId} != value of #{'vault-password2-' + formId}
        add [@aria-invalid=true] to #{'vault-password2-' + formId} throw '{{ L["Password confirmation missing"] }}'
      end
      call VaultSetupUserCryptoAndSend(value of #{'vault-password-' + formId})
      set value of #{formId} to (result as JSON)
      call window.vault.lock()
      trigger submit on closest <form/>
    else
      halt the event
      remove @aria-invalid from <[aria-invalid]/> in me
      if not value of #{'vault-password-' + formId}
        add [@aria-invalid=true] to #{'vault-password-' + formId} throw '{{ L["Current password missing"] }}'
      end
      if not value of #{'vault-password-new-' + formId}
        add [@aria-invalid=true] to #{'vault-password-new-' + formId} throw '{{ L["New password missing"] }}'
      end
      if value of #{'vault-password-new-' + formId} != value of #{'vault-password-new2-' + formId}
        add [@aria-invalid=true] to #{'vault-password-new2-' + formId} throw '{{ L["Passwords do not match"] }}'
      end
      set previousLock to window.vault.isUnlocked()
      call JSON.parse(value of #{formId}) set keyData to the result
      call VaultChangePassword(value of #{'vault-password-' + formId}, value of #{'vault-password-new-' + formId}, keyData)
      call window.vault.exportPayload()
      set value of #{formId} to (result as JSON)
      if not previousLock call window.vault.lock() end
      trigger submit on closest <form/>
    end
  end

  on exception(error)
      trigger notification(level: 'error', title: '{{ L["Vault error"] }}', message: error, duration: 3000)
  end
end


behavior vaultDialog
  def setUnlocked
    add .hidden to <fieldset/> in me
    get .vault-unlock in me
      set its textContent to '{{ L["Lock"] }}'
      remove @disabled from it
    set #vault-dialog-toggle's @class to 'shine color-green'
    set #vault-dialog-toggle's textContent to '{{ L["Vault"] }} ðŸ”“'
  end

  def setLocked
    remove .hidden from <fieldset/> in me
    get .vault-unlock in me
      set its textContent to '{{ L["Unlock"] }}'
      remove @disabled from it
    set #vault-dialog-toggle's @class to 'shine color-pink'
    set #vault-dialog-toggle's textContent to '{{ L["Vault"] }} ðŸ”’'
  end

  def novault
    add .hidden to <fieldset/> in me
    get .vault-unlock in me
      add @disabled to it
      set its textContent to '{{ L["Not available"] }}'
    set #vault-dialog-toggle's @class to 'shine color-zinc-650'
    set #vault-dialog-toggle's textContent to '{{ L["Vault not available"] }}'
  end

  init
    if window.vault.isUnlocked()
      call setUnlocked()
    else
      get .vault-unlock in me
        if its @data-vault != "" and its @data-vault != "{}"
          call setLocked()
        else
          call novault()
        end
    end
  end

  on profileUpdate from body
    get .vault-unlock in me
      if event.detail.vault and its @data-vault != event.detail.vault
        set its @data-vault to event.detail.vault
        if event.detail.vault != "{}" and event.detail.vault != ""
          call window.vault.lock()
          call setLocked()
        end
      end
  end

  on keydown[keyCode == 13] from .vault-unlock-pin in me
    trigger click on .vault-unlock in me unless event.target's value is empty
  end

  on click from .vault-unlock in me
    halt the event
    if not window.vault.isUnlocked()
      set pin to (value of .vault-unlock-pin in me)
      throw '{{ L["Password missing"] }}' unless pin
      call JSON.parse(event.target's @data-vault) set keyData to the result
      call VaultUnlockPrivateKey(pin, keyData)
      call setUnlocked()
    else
      call window.vault.lock()
      call setLocked()
    end
    set value of (.vault-unlock-pin in me) to ''
    remove @open from closest <dialog/>
  end

  on exception(error)
    trigger notification(
      title: '{{ L["vault error"] }}',
      level: 'validationError',
      message: '{{ L["Could not unlock vault, check your password"] }}',
      duration: 5000,
      locations: ['menu-vault-unlock-pin']
    )
  end
end

behavior vaultField
  init
    set :isActive to false
    if (my value).startsWith('uv:')
      add .encrypted-field
      add @readonly
    end
    put `<label class="small" _="on click
      halt the event's bubbling
      trigger vaultToggle on #${my id}
    end">
      <input id="${my id + '-vault-toggle'}" type="checkbox" role="switch"/>
      {{ L["Encrypt data"] }}
    </label>` as Fragment after me
    set :toggle to #{my id + '-vault-toggle'}
    set :toggle.checked to (I match .encrypted-field)
  end
  on vaultToggle queue last
    add @disabled to :toggle
    if not :toggle.checked and I match .encrypted-field
      set :toggle.checked to true
      add .shake to :toggle settle remove .shake from :toggle
    else if :toggle.checked and I do not match .encrypted-field
      if window.vault.isUnlocked()
        vaultField('encrypt')
      else
        set :toggle.checked to false
        add .shake to :toggle settle remove .shake from :toggle
      end
    end
    remove @disabled from :toggle
  end
  on blur or change
    vaultField('encrypt')
  end
  on focus or click from closest <fieldset/>
    vaultField('decrypt')
  end
  on htmx:beforeRequest from closest <form/> queue none
    halt the event unless :isActive is false
  end
  def vaultField(mode)
    exit unless window.vault.isUnlocked() and my value and :toggle.checked
    set :isActive to true
    if I match .encrypted-field and mode == 'decrypt'
      set my value to window.vault.decryptData(my value)
      remove .encrypted-field
      remove @readonly
    else if I do not match .encrypted-field and mode == 'encrypt'
      set my value to window.vault.encryptData(my value)
      add .encrypted-field
      add @readonly
    end
    set :isActive to false
  end
end
